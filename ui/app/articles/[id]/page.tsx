"use client"

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Calendar, ArrowLeft, Share2 } from "lucide-react"
import { use, useEffect, useState } from "react"
import { ArticleItem } from "@/interface/article"
import { ArticleContent } from "@/components/article-content"

export default function ArticlePage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = use(params)
  const [article, setArticle] = useState<ArticleItem | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    fetchArticle()
  }, [])

  const fetchArticle = async () => {
    try {
      const response = await fetch(`/api/articles/${id}`)
      if (!response.ok) throw new Error('Failed to fetch article')
      
      const data = await response.json()
      setArticle(data.article)
    } catch (err) {
      setError('Failed to load article')
      console.error('Error:', err)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto py-8 px-4">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-muted rounded w-3/4" />
          <div className="h-64 bg-muted rounded-xl" />
          <div className="space-y-2">
            <div className="h-4 bg-muted rounded w-full" />
            <div className="h-4 bg-muted rounded w-5/6" />
          </div>
        </div>
      </div>
    )
  }

  if (error || !article) {
    return (
      <div className="max-w-4xl mx-auto py-8 px-4 text-center">
        <p className="text-red-500">{error || 'Article not found'}</p>
        <Button asChild className="mt-4">
          <Link href="/articles">Back to Articles</Link>
        </Button>
      </div>
    )
  }

  return (
    <article className="max-w-7xl mx-auto py-8 px-4 md:px-6 md:py-12">
      <div className="max-w-3xl mx-auto">
        <div className="mb-8">
          <Button asChild variant="ghost" className="mb-4 -ml-2 gap-1">
            <Link href="/articles">
              <ArrowLeft className="h-4 w-4" />
              Back to Articles
            </Link>
          </Button>

          <div className="flex items-center gap-2 text-sm text-muted-foreground mb-2">
            <Calendar className="h-3.5 w-3.5" />
            <span>{article.date}</span>
          </div>

          <h1 className="text-3xl md:text-4xl font-bold mb-4">{article.title}</h1>

          <div className="flex flex-wrap gap-2 mb-6">
            {article.tags.map((tag) => (
              <Badge key={tag} variant="secondary">
                {tag}
              </Badge>
            ))}
          </div>
        </div>

        <div className="relative w-full aspect-[2/1] mb-8 rounded-lg overflow-hidden">
          <img
            src={article.imageUrl || "/placeholder.svg"}
            alt={article.title}
            className="w-full h-full object-cover"
          />
        </div>

        <ArticleContent content={article.content} className="mb-8" />

        <div className="border-t pt-6 mt-8">
          <div className="flex items-center justify-between">
            <p className="text-sm text-muted-foreground">
              <span className="font-medium">Disclaimer: Content is AI-generated by ChatGPT from image</span>
            </p>
            <Button 
              variant="outline" 
              size="sm" 
              className="gap-2"
              onClick={async () => {
                if (navigator.share) {
                  try {
                    await navigator.share({
                      title: article.title,
                      text: article.title,
                      url: window.location.href,
                    });
                  } catch (err: any) {
                    if (err.name === 'AbortError') {
                      console.log('Share action was canceled by the user.');
                    } else {
                      console.error('Error sharing:', err);
                    }
                  }
                } else {
                  // Fallback to copying to clipboard
                  try {
                    await navigator.clipboard.writeText(window.location.href);
                    alert('Link copied to clipboard!');
                  } catch (err) {
                    console.error('Error copying to clipboard:', err);
                  }
                }
              }}
            >
              <Share2 className="h-4 w-4" />
              Share Article
            </Button>
          </div>
        </div>
      </div>
    </article>
  )
}
